RRPin = function (config) {
    var geometry = config.geometry;
    var left    = (geometry && geometry.left)    ? geometry.left    : 0;
    var top     = (geometry && geometry.top)     ? geometry.top     : 0;
    var height  = (geometry && geometry.height)  ? geometry.height  : 200;
    var width   = (geometry && geometry.width)   ? geometry.width   : 200;
    this.geometry = {
        left:   left,
        top:    top,
        height: height,
        width:  width
    };
    this.commentList = [];
    this.commentMap = {};
    this.user = config.user;
    if (config.id) this.id = config.id;
};

/* --- ACCESSORS --- */

RRPin.prototype.getUser = function () {
    return this.user;
};

RRPin.prototype.getId = function () {
    return this.id;
};

/**
 * @return Object<{left, top, height, width), Number> - a 4-element object representing the 
 *                                                      various geometry properties of the RRPin
 */
RRPin.prototype.getGeometry = function () {
    return this.geometry;
};

/**
 * @return Array<Comment> - the set of comments that have been posted against this pin
 */
RRPin.prototype.getComments = function () {
    return this.commentList;
};

/**
 * @return Comment
 */
RRPin.prototype.getComment = function (id) {
    return this.commentMap[id];
};

/* --- SETTERS --- */

RRPin.prototype.setUser = function (user) {
    this.user = user;
};

RRPin.prototype.setGeometry = function (left, top, height, width) {
    this.geometry.left   = left;
    this.geometry.top    = top;
    this.geometry.height = height;
    this.geometry.width  = width; 
};

/* --- CHECKERS --- */

RRPin.prototype.hasComment = function (id) {
    return (this.commentMap[id] instanceof RRComment);
};
